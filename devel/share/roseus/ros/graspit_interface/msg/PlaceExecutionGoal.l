;; Auto-generated. Do not edit!


(when (boundp 'graspit_interface::PlaceExecutionGoal)
  (if (not (find-package "GRASPIT_INTERFACE"))
    (make-package "GRASPIT_INTERFACE"))
  (shadow 'PlaceExecutionGoal (find-package "GRASPIT_INTERFACE")))
(unless (find-package "GRASPIT_INTERFACE::PLACEEXECUTIONGOAL")
  (make-package "GRASPIT_INTERFACE::PLACEEXECUTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude PlaceExecutionGoal.msg.html


(defclass graspit_interface::PlaceExecutionGoal
  :super ros::object
  :slots (_grasp ))

(defmethod graspit_interface::PlaceExecutionGoal
  (:init
   (&key
    ((:grasp __grasp) (instance graspit_interface::Grasp :init))
    )
   (send-super :init)
   (setq _grasp __grasp)
   self)
  (:grasp
   (&rest __grasp)
   (if (keywordp (car __grasp))
       (send* _grasp __grasp)
     (progn
       (if __grasp (setq _grasp (car __grasp)))
       _grasp)))
  (:serialization-length
   ()
   (+
    ;; graspit_interface/Grasp _grasp
    (send _grasp :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; graspit_interface/Grasp _grasp
       (send _grasp :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; graspit_interface/Grasp _grasp
     (send _grasp :deserialize buf ptr-) (incf ptr- (send _grasp :serialization-length))
   ;;
   self)
  )

(setf (get graspit_interface::PlaceExecutionGoal :md5sum-) "a312f56b63ceb614a83a0b34da32973f")
(setf (get graspit_interface::PlaceExecutionGoal :datatype-) "graspit_interface/PlaceExecutionGoal")
(setf (get graspit_interface::PlaceExecutionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
graspit_interface/Grasp grasp

================================================================================
MSG: graspit_interface/Grasp
# id for the body the grasp was planned on.
int32 graspable_body_id

# pose of the hand with respect to the object 
# the grasp was planned on
geometry_msgs/Pose pose

float64[] dofs

float64 epsilon_quality
float64 volume_quality

# The approach direction to take before picking an object
geometry_msgs/Vector3Stamped approach_direction

#model_name of object to be grasped
string object_name

int32 grasp_id

float64[] secondary_qualities
int32 grasp_source
int32 grasp_group
int32 grasp_type


geometry_msgs/Pose pre_grasp_pose
geometry_msgs/Pose final_grasp_pose
float64[] pre_grasp_dof
float64[] final_grasp_dof
#geometry_msgs/Pose demonstration_pose

int32 TYPE_UNKNOWN = 1
int32 TYPE_FINGERTIP = 2
int32 TYPE_POWER_GRASP = 3        # free grasp
int32 TYPE_TABLECONTACT_GRASP = 4 # finger will make contact w/ table
int32 SPREAD_DOF=0
int32 FINGER_1_DOF=1
int32 FINGER_2_DOF=2
int32 FINGER_3_DOF=3
int32 SOURCE_EIGENGRASPS=1
int32 SOURCE_HUMAN=2
int32 SOURCE_HUMAN_REFINED=3
int32 SOURCE_TABLETOP_ALIGNED=7


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :graspit_interface/PlaceExecutionGoal "a312f56b63ceb614a83a0b34da32973f")



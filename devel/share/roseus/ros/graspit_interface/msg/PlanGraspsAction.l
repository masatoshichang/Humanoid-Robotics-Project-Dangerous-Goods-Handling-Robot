;; Auto-generated. Do not edit!


(when (boundp 'graspit_interface::PlanGraspsAction)
  (if (not (find-package "GRASPIT_INTERFACE"))
    (make-package "GRASPIT_INTERFACE"))
  (shadow 'PlanGraspsAction (find-package "GRASPIT_INTERFACE")))
(unless (find-package "GRASPIT_INTERFACE::PLANGRASPSACTION")
  (make-package "GRASPIT_INTERFACE::PLANGRASPSACTION"))

(in-package "ROS")
;;//! \htmlinclude PlanGraspsAction.msg.html


(defclass graspit_interface::PlanGraspsAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod graspit_interface::PlanGraspsAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance graspit_interface::PlanGraspsActionGoal :init))
    ((:action_result __action_result) (instance graspit_interface::PlanGraspsActionResult :init))
    ((:action_feedback __action_feedback) (instance graspit_interface::PlanGraspsActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; graspit_interface/PlanGraspsActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; graspit_interface/PlanGraspsActionResult _action_result
    (send _action_result :serialization-length)
    ;; graspit_interface/PlanGraspsActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; graspit_interface/PlanGraspsActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; graspit_interface/PlanGraspsActionResult _action_result
       (send _action_result :serialize s)
     ;; graspit_interface/PlanGraspsActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; graspit_interface/PlanGraspsActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; graspit_interface/PlanGraspsActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; graspit_interface/PlanGraspsActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get graspit_interface::PlanGraspsAction :md5sum-) "337c102aac56a7c4c11d16f0bee0a048")
(setf (get graspit_interface::PlanGraspsAction :datatype-) "graspit_interface/PlanGraspsAction")
(setf (get graspit_interface::PlanGraspsAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

PlanGraspsActionGoal action_goal
PlanGraspsActionResult action_result
PlanGraspsActionFeedback action_feedback

================================================================================
MSG: graspit_interface/PlanGraspsActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
PlanGraspsGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: graspit_interface/PlanGraspsGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
int32 graspable_body_id

Planner planner
string search_energy
SearchSpace search_space
SearchContact search_contact

int32 max_steps

================================================================================
MSG: graspit_interface/Planner
uint8 SIM_ANN                      = 0
uint8 MULTI_THREADED               = 1

uint8 type
================================================================================
MSG: graspit_interface/SearchSpace
uint8 SPACE_AXIS_ANGLE    = 0
uint8 SPACE_COMPLETE      = 1
uint8 SPACE_ELLIPSOID     = 2
uint8 SPACE_APPROACH      = 3

uint8 type
================================================================================
MSG: graspit_interface/SearchContact
uint8 CONTACT_PRESET    = 0
uint8 CONTACT_LIVE      = 1

uint8 type	
================================================================================
MSG: graspit_interface/PlanGraspsActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
PlanGraspsResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: graspit_interface/PlanGraspsResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
Grasp[] grasps
float64[] energies
string search_energy

================================================================================
MSG: graspit_interface/Grasp
# id for the body the grasp was planned on.
int32 graspable_body_id

# pose of the hand with respect to the object 
# the grasp was planned on
geometry_msgs/Pose pose

float64[] dofs

float64 epsilon_quality
float64 volume_quality

# The approach direction to take before picking an object
geometry_msgs/Vector3Stamped approach_direction

#model_name of object to be grasped
string object_name

int32 grasp_id

float64[] secondary_qualities
int32 grasp_source
int32 grasp_group
int32 grasp_type


geometry_msgs/Pose pre_grasp_pose
geometry_msgs/Pose final_grasp_pose
float64[] pre_grasp_dof
float64[] final_grasp_dof
#geometry_msgs/Pose demonstration_pose

int32 TYPE_UNKNOWN = 1
int32 TYPE_FINGERTIP = 2
int32 TYPE_POWER_GRASP = 3        # free grasp
int32 TYPE_TABLECONTACT_GRASP = 4 # finger will make contact w/ table
int32 SPREAD_DOF=0
int32 FINGER_1_DOF=1
int32 FINGER_2_DOF=2
int32 FINGER_3_DOF=3
int32 SOURCE_EIGENGRASPS=1
int32 SOURCE_HUMAN=2
int32 SOURCE_HUMAN_REFINED=3
int32 SOURCE_TABLETOP_ALIGNED=7


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: graspit_interface/PlanGraspsActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
PlanGraspsFeedback feedback

================================================================================
MSG: graspit_interface/PlanGraspsFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback 
int32 current_step
int32 current_num_grasps


")



(provide :graspit_interface/PlanGraspsAction "337c102aac56a7c4c11d16f0bee0a048")



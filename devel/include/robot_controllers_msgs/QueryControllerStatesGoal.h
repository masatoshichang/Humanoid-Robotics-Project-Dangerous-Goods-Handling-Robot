// Generated by gencpp from file robot_controllers_msgs/QueryControllerStatesGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROLLERS_MSGS_MESSAGE_QUERYCONTROLLERSTATESGOAL_H
#define ROBOT_CONTROLLERS_MSGS_MESSAGE_QUERYCONTROLLERSTATESGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_controllers_msgs/ControllerState.h>

namespace robot_controllers_msgs
{
template <class ContainerAllocator>
struct QueryControllerStatesGoal_
{
  typedef QueryControllerStatesGoal_<ContainerAllocator> Type;

  QueryControllerStatesGoal_()
    : updates()  {
    }
  QueryControllerStatesGoal_(const ContainerAllocator& _alloc)
    : updates(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_controllers_msgs::ControllerState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_controllers_msgs::ControllerState_<ContainerAllocator> >::other >  _updates_type;
  _updates_type updates;




  typedef boost::shared_ptr< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> const> ConstPtr;

}; // struct QueryControllerStatesGoal_

typedef ::robot_controllers_msgs::QueryControllerStatesGoal_<std::allocator<void> > QueryControllerStatesGoal;

typedef boost::shared_ptr< ::robot_controllers_msgs::QueryControllerStatesGoal > QueryControllerStatesGoalPtr;
typedef boost::shared_ptr< ::robot_controllers_msgs::QueryControllerStatesGoal const> QueryControllerStatesGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_controllers_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robot_controllers_msgs': ['/home/masatoshichang/robotics/fetch_ws/src/robot_controllers/robot_controllers_msgs/msg', '/home/masatoshichang/robotics/fetch_ws/devel/share/robot_controllers_msgs/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ecbb837d1e8545d81a831a4c1c4bfcc";
  }

  static const char* value(const ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ecbb837d1e8545dULL;
  static const uint64_t static_value2 = 0x81a831a4c1c4bfccULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_controllers_msgs/QueryControllerStatesGoal";
  }

  static const char* value(const ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# This action allows one to query current information about\n\
# controller state, as well as change the controller state.\n\
\n\
# Action goal:\n\
# Requested changes to controller state. Each state must\n\
# have at least the controller name and new state. If the\n\
# controller type is non-empty, then it will be used to\n\
# make sure that the controller type matches. \n\
ControllerState[] updates\n\
\n\
================================================================================\n\
MSG: robot_controllers_msgs/ControllerState\n\
# Valid states:\n\
\n\
uint8 STOPPED = 0\n\
uint8 RUNNING = 1\n\
uint8 ERROR = 2\n\
\n\
string name\n\
string type\n\
uint8 state\n\
";
  }

  static const char* value(const ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.updates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryControllerStatesGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_controllers_msgs::QueryControllerStatesGoal_<ContainerAllocator>& v)
  {
    s << indent << "updates[]" << std::endl;
    for (size_t i = 0; i < v.updates.size(); ++i)
    {
      s << indent << "  updates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_controllers_msgs::ControllerState_<ContainerAllocator> >::stream(s, indent + "    ", v.updates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROLLERS_MSGS_MESSAGE_QUERYCONTROLLERSTATESGOAL_H

// Generated by gencpp from file graspit_interface/PlanGraspsResult.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H
#define GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graspit_interface/Grasp.h>

namespace graspit_interface
{
template <class ContainerAllocator>
struct PlanGraspsResult_
{
  typedef PlanGraspsResult_<ContainerAllocator> Type;

  PlanGraspsResult_()
    : grasps()
    , energies()
    , search_energy()  {
    }
  PlanGraspsResult_(const ContainerAllocator& _alloc)
    : grasps(_alloc)
    , energies(_alloc)
    , search_energy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::graspit_interface::Grasp_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::graspit_interface::Grasp_<ContainerAllocator> >::other >  _grasps_type;
  _grasps_type grasps;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _energies_type;
  _energies_type energies;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _search_energy_type;
  _search_energy_type search_energy;




  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const> ConstPtr;

}; // struct PlanGraspsResult_

typedef ::graspit_interface::PlanGraspsResult_<std::allocator<void> > PlanGraspsResult;

typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult > PlanGraspsResultPtr;
typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult const> PlanGraspsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graspit_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'graspit_interface': ['/home/masatoshichang/robotics/fetch_ws/src/graspit_interface/msg', '/home/masatoshichang/robotics/fetch_ws/devel/share/graspit_interface/msg'], 'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17acd5bee661a4024fdb4ee6418627a3";
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17acd5bee661a402ULL;
  static const uint64_t static_value2 = 0x4fdb4ee6418627a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/PlanGraspsResult";
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Result\n\
Grasp[] grasps\n\
float64[] energies\n\
string search_energy\n\
\n\
================================================================================\n\
MSG: graspit_interface/Grasp\n\
# id for the body the grasp was planned on.\n\
int32 graspable_body_id\n\
\n\
# pose of the hand with respect to the object \n\
# the grasp was planned on\n\
geometry_msgs/Pose pose\n\
\n\
float64[] dofs\n\
\n\
float64 epsilon_quality\n\
float64 volume_quality\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasps);
      stream.next(m.energies);
      stream.next(m.search_energy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanGraspsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>& v)
  {
    s << indent << "grasps[]" << std::endl;
    for (size_t i = 0; i < v.grasps.size(); ++i)
    {
      s << indent << "  grasps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::graspit_interface::Grasp_<ContainerAllocator> >::stream(s, indent + "    ", v.grasps[i]);
    }
    s << indent << "energies[]" << std::endl;
    for (size_t i = 0; i < v.energies.size(); ++i)
    {
      s << indent << "  energies[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.energies[i]);
    }
    s << indent << "search_energy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.search_energy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H

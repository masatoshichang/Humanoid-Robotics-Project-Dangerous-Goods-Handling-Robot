// Generated by gencpp from file graspit_interface/PlanGraspsGoal.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_PLANGRASPSGOAL_H
#define GRASPIT_INTERFACE_MESSAGE_PLANGRASPSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graspit_interface/Planner.h>
#include <graspit_interface/SearchSpace.h>
#include <graspit_interface/SearchContact.h>

namespace graspit_interface
{
template <class ContainerAllocator>
struct PlanGraspsGoal_
{
  typedef PlanGraspsGoal_<ContainerAllocator> Type;

  PlanGraspsGoal_()
    : graspable_body_id(0)
    , planner()
    , search_energy()
    , search_space()
    , search_contact()
    , max_steps(0)  {
    }
  PlanGraspsGoal_(const ContainerAllocator& _alloc)
    : graspable_body_id(0)
    , planner(_alloc)
    , search_energy(_alloc)
    , search_space(_alloc)
    , search_contact(_alloc)
    , max_steps(0)  {
  (void)_alloc;
    }



   typedef int32_t _graspable_body_id_type;
  _graspable_body_id_type graspable_body_id;

   typedef  ::graspit_interface::Planner_<ContainerAllocator>  _planner_type;
  _planner_type planner;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _search_energy_type;
  _search_energy_type search_energy;

   typedef  ::graspit_interface::SearchSpace_<ContainerAllocator>  _search_space_type;
  _search_space_type search_space;

   typedef  ::graspit_interface::SearchContact_<ContainerAllocator>  _search_contact_type;
  _search_contact_type search_contact;

   typedef int32_t _max_steps_type;
  _max_steps_type max_steps;




  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PlanGraspsGoal_

typedef ::graspit_interface::PlanGraspsGoal_<std::allocator<void> > PlanGraspsGoal;

typedef boost::shared_ptr< ::graspit_interface::PlanGraspsGoal > PlanGraspsGoalPtr;
typedef boost::shared_ptr< ::graspit_interface::PlanGraspsGoal const> PlanGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graspit_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'graspit_interface': ['/home/masatoshichang/robotics/fetch_ws/src/graspit_interface/msg', '/home/masatoshichang/robotics/fetch_ws/devel/share/graspit_interface/msg'], 'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2529d72cbaf5ef4023f0a09663cf6c5a";
  }

  static const char* value(const ::graspit_interface::PlanGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2529d72cbaf5ef40ULL;
  static const uint64_t static_value2 = 0x23f0a09663cf6c5aULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/PlanGraspsGoal";
  }

  static const char* value(const ::graspit_interface::PlanGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
int32 graspable_body_id\n\
\n\
Planner planner\n\
string search_energy\n\
SearchSpace search_space\n\
SearchContact search_contact\n\
\n\
int32 max_steps\n\
\n\
================================================================================\n\
MSG: graspit_interface/Planner\n\
uint8 SIM_ANN                      = 0\n\
uint8 MULTI_THREADED               = 1\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: graspit_interface/SearchSpace\n\
uint8 SPACE_AXIS_ANGLE    = 0\n\
uint8 SPACE_COMPLETE      = 1\n\
uint8 SPACE_ELLIPSOID     = 2\n\
uint8 SPACE_APPROACH      = 3\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: graspit_interface/SearchContact\n\
uint8 CONTACT_PRESET    = 0\n\
uint8 CONTACT_LIVE      = 1\n\
\n\
uint8 type	\n\
";
  }

  static const char* value(const ::graspit_interface::PlanGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graspable_body_id);
      stream.next(m.planner);
      stream.next(m.search_energy);
      stream.next(m.search_space);
      stream.next(m.search_contact);
      stream.next(m.max_steps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::PlanGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::PlanGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "graspable_body_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.graspable_body_id);
    s << indent << "planner: ";
    s << std::endl;
    Printer< ::graspit_interface::Planner_<ContainerAllocator> >::stream(s, indent + "  ", v.planner);
    s << indent << "search_energy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.search_energy);
    s << indent << "search_space: ";
    s << std::endl;
    Printer< ::graspit_interface::SearchSpace_<ContainerAllocator> >::stream(s, indent + "  ", v.search_space);
    s << indent << "search_contact: ";
    s << std::endl;
    Printer< ::graspit_interface::SearchContact_<ContainerAllocator> >::stream(s, indent + "  ", v.search_contact);
    s << indent << "max_steps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_steps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_PLANGRASPSGOAL_H

// Generated by gencpp from file graspit_msgs/RunObjectRecognitionResult.msg
// DO NOT EDIT!


#ifndef GRASPIT_MSGS_MESSAGE_RUNOBJECTRECOGNITIONRESULT_H
#define GRASPIT_MSGS_MESSAGE_RUNOBJECTRECOGNITIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graspit_msgs/ObjectInfo.h>

namespace graspit_msgs
{
template <class ContainerAllocator>
struct RunObjectRecognitionResult_
{
  typedef RunObjectRecognitionResult_<ContainerAllocator> Type;

  RunObjectRecognitionResult_()
    : object_info()  {
    }
  RunObjectRecognitionResult_(const ContainerAllocator& _alloc)
    : object_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::graspit_msgs::ObjectInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::graspit_msgs::ObjectInfo_<ContainerAllocator> >::other >  _object_info_type;
  _object_info_type object_info;




  typedef boost::shared_ptr< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> const> ConstPtr;

}; // struct RunObjectRecognitionResult_

typedef ::graspit_msgs::RunObjectRecognitionResult_<std::allocator<void> > RunObjectRecognitionResult;

typedef boost::shared_ptr< ::graspit_msgs::RunObjectRecognitionResult > RunObjectRecognitionResultPtr;
typedef boost::shared_ptr< ::graspit_msgs::RunObjectRecognitionResult const> RunObjectRecognitionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graspit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'graspit_msgs': ['/home/masatoshichang/robotics/fetch_ws/src/graspit_msgs/msg', '/home/masatoshichang/robotics/fetch_ws/devel/share/graspit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdc8d8269b448089f6ea6aa337b990f2";
  }

  static const char* value(const ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdc8d8269b448089ULL;
  static const uint64_t static_value2 = 0xf6ea6aa337b990f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_msgs/RunObjectRecognitionResult";
  }

  static const char* value(const ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
graspit_msgs/ObjectInfo[] object_info\n\
\n\
================================================================================\n\
MSG: graspit_msgs/ObjectInfo\n\
string object_name\n\
string model_name\n\
geometry_msgs/Pose object_pose\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunObjectRecognitionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_msgs::RunObjectRecognitionResult_<ContainerAllocator>& v)
  {
    s << indent << "object_info[]" << std::endl;
    for (size_t i = 0; i < v.object_info.size(); ++i)
    {
      s << indent << "  object_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::graspit_msgs::ObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.object_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_MSGS_MESSAGE_RUNOBJECTRECOGNITIONRESULT_H

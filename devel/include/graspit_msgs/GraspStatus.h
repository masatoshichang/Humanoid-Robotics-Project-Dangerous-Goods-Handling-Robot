// Generated by gencpp from file graspit_msgs/GraspStatus.msg
// DO NOT EDIT!


#ifndef GRASPIT_MSGS_MESSAGE_GRASPSTATUS_H
#define GRASPIT_MSGS_MESSAGE_GRASPSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graspit_msgs
{
template <class ContainerAllocator>
struct GraspStatus_
{
  typedef GraspStatus_<ContainerAllocator> Type;

  GraspStatus_()
    : grasp_status(0)
    , status_msg()
    , grasp_identifier(0.0)  {
    }
  GraspStatus_(const ContainerAllocator& _alloc)
    : grasp_status(0)
    , status_msg(_alloc)
    , grasp_identifier(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _grasp_status_type;
  _grasp_status_type grasp_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_msg_type;
  _status_msg_type status_msg;

   typedef double _grasp_identifier_type;
  _grasp_identifier_type grasp_identifier;


    enum { FAILED = 0u };
     enum { SUCCESS = 1u };
     enum { UNREACHABLE = 2u };
     enum { OBJECTERROR = 4u };
     enum { ROBOTERROR = 8u };
     enum { ENDEFFECTORERROR = 16u };
     enum { GRASPERROR = 32u };
     enum { PREGRASPERROR = 64u };
 

  typedef boost::shared_ptr< ::graspit_msgs::GraspStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_msgs::GraspStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GraspStatus_

typedef ::graspit_msgs::GraspStatus_<std::allocator<void> > GraspStatus;

typedef boost::shared_ptr< ::graspit_msgs::GraspStatus > GraspStatusPtr;
typedef boost::shared_ptr< ::graspit_msgs::GraspStatus const> GraspStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_msgs::GraspStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_msgs::GraspStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graspit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'graspit_msgs': ['/home/masatoshichang/robotics/fetch_ws/src/graspit_msgs/msg', '/home/masatoshichang/robotics/fetch_ws/devel/share/graspit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_msgs::GraspStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_msgs::GraspStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_msgs::GraspStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88d06ce7ea2a1be53f7072dbaa262a0b";
  }

  static const char* value(const ::graspit_msgs::GraspStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88d06ce7ea2a1be5ULL;
  static const uint64_t static_value2 = 0x3f7072dbaa262a0bULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_msgs/GraspStatus";
  }

  static const char* value(const ::graspit_msgs::GraspStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 grasp_status\n\
string status_msg\n\
float64 grasp_identifier\n\
uint8 FAILED = 0\n\
uint8 SUCCESS = 1\n\
uint8 UNREACHABLE = 2\n\
uint8 OBJECTERROR = 4\n\
uint8 ROBOTERROR = 8\n\
uint8 ENDEFFECTORERROR = 16\n\
uint8 GRASPERROR = 32\n\
uint8 PREGRASPERROR = 64\n\
";
  }

  static const char* value(const ::graspit_msgs::GraspStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_status);
      stream.next(m.status_msg);
      stream.next(m.grasp_identifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_msgs::GraspStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_msgs::GraspStatus_<ContainerAllocator>& v)
  {
    s << indent << "grasp_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasp_status);
    s << indent << "status_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_msg);
    s << indent << "grasp_identifier: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_identifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_MSGS_MESSAGE_GRASPSTATUS_H
